require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EvidenceController, type: :controller do
  login_admin

  let(:book) { create(:book) }

  # This should return the minimal set of attributes required to create a valid
  # Evidence. As you add validations to Evidence, be sure to
  # adjust the attributes here as well.
  # `book_id` is not a valid attribute for creating the object
  let(:valid_attributes) {
    {
      format: 'binding',
      book: book
     }
  }

  # With an association, you can't push the model as a param; you have to push
  # the foreign key
  let(:valid_params) {
    {
      format: 'binding',
      book_id: book
    }
  }

  let(:invalid_attributes) {
    {
      format: nil,
      book: book
     }
  }

    let(:invalid_params) {
    {
      format: nil,
      book_id: book
     }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EvidenceController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all evidence as @evidence" do
      evidence = Evidence.create! valid_attributes
      # evidence = Evidence.create! valid_attributes
      get :index, {book: book}, valid_session
      expect(assigns(:evidence)).to eq([evidence])
    end
  end

  describe "GET #show" do
    it "assigns the requested evidence as @evidence" do
      evidence = Evidence.create! valid_attributes
      get :show, {id: evidence.to_param}, valid_session
      expect(assigns(:evidence)).to eq(evidence)
    end
  end

  describe "GET #new" do
    it "assigns a new evidence as @evidence" do
      # the new action actually call evidence_params to get :format
      get :new, { book_id: book.id, evidence: valid_params }, valid_session
      expect(assigns(:evidence)).to be_a_new(Evidence)
    end
  end

  describe "GET #edit" do
    it "assigns the requested evidence as @evidence" do
      evidence = Evidence.create! valid_attributes
      get :edit, {id: evidence.id }, valid_session
      expect(assigns(:evidence)).to eq(evidence)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Evidence" do
        expect {
          post :create, { book_id: book, evidence: valid_params }, valid_session
        }.to change(Evidence, :count).by(1)
      end

      it "assigns a newly created evidence as @evidence" do
        post :create, { book_id: book, evidence: valid_params }, valid_session
        expect(assigns(:evidence)).to be_a(Evidence)
        expect(assigns(:evidence)).to be_persisted
      end

      it "redirects to the created evidence" do
        post :create, {book_id: book, evidence: valid_params }, valid_session
        expect(response).to redirect_to(Evidence.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved evidence as @evidence" do
        post :create, { book_id: book, evidence: invalid_params }, valid_session
        expect(assigns(:evidence)).to be_a_new(Evidence)
      end

      it "re-renders the 'new' template" do
        post :create, { book_id: book, evidence: invalid_params }, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          year_when: "1931",
          book_id: book
        }
      }

      it "updates the requested evidence" do
        evidence = Evidence.create! valid_attributes
        put :update, { id: evidence.to_param, evidence: new_attributes }, valid_session
        evidence.reload
        expect(evidence.year_when).to eq(1931)
      end

      it "assigns the requested evidence as @evidence" do
        evidence = Evidence.create! valid_attributes
        put :update, {id: evidence.to_param, evidence: valid_attributes}, valid_session
        expect(assigns(:evidence)).to eq(evidence)
      end

      it "redirects to the evidence" do
        evidence = Evidence.create! valid_attributes
        put :update, {id: evidence.to_param, evidence: valid_attributes}, valid_session
        expect(response).to redirect_to(evidence)
      end
    end

    context "with invalid params" do
      it "assigns the evidence as @evidence" do
        evidence = Evidence.create! valid_attributes
        put :update, {id: evidence.to_param, evidence: invalid_attributes}, valid_session
        expect(assigns(:evidence)).to eq(evidence)
      end

      it "re-renders the 'edit' template" do
        evidence = Evidence.create! valid_attributes
        put :update, {id: evidence.to_param, evidence: invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  # describe "DELETE #destroy" do
  #   it "destroys the requested evidence" do
  #     evidence = Evidence.create! valid_attributes
  #     expect {
  #       delete :destroy, {id: evidence.to_param}, valid_session
  #     }.to change(Evidence, :count).by(-1)
  #   end

  #   it "redirects to the evidence list" do
  #     evidence = Evidence.create! valid_attributes
  #     delete :destroy, {id: evidence.to_param}, valid_session
  #     expect(response).to redirect_to(evidence_index_url)
  #   end
  # end

end
